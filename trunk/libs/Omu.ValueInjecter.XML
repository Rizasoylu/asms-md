<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Omu.ValueInjecter</name>
    </assembly>
    <members>
        <member name="M:Omu.ValueInjecter.DescriptorTools.GetByName(System.ComponentModel.PropertyDescriptorCollection,System.String)">
            <summary>
            Seek for a PropertyDescriptor within the collection by Name
            </summary>
            <returns>the search result or null if nothing was found</returns>
        </member>
        <member name="M:Omu.ValueInjecter.DescriptorTools.GetByName(System.ComponentModel.PropertyDescriptorCollection,System.String,System.Boolean)">
            <summary>
            Seek for a PropertyDescriptor within the collection by Name with option to ignore case
            </summary>
            <returns>search result or null if nothing was found</returns>
        </member>
        <member name="M:Omu.ValueInjecter.DescriptorTools.GetByNameType``1(System.ComponentModel.PropertyDescriptorCollection,System.String)">
            <summary>
            Search for a PropertyDescriptor within the collection that is of a specific type T
            </summary>
            <returns>search result or null if nothing was found</returns>
        </member>
        <member name="T:Omu.ValueInjecter.Flatter">
            <summary>
            provides flattening/unflattening functionality
            Vadim Plamadeala made this â˜º
            </summary>
        </member>
        <member name="M:Omu.ValueInjecter.Flatter.SearchForUnflatProperty(System.String,System.ComponentModel.PropertyDescriptorCollection,System.Object)">
            <summary>
            searches for the unflat property in the unflat object according to the flatPropertyName
            </summary>
            <param name="flatPropertyFlatPropertyName">the string name of the flat property, Sample: FooBarAddressName</param>
            <param name="unflatProps">the properties of the unflat object (where the search is going to be)</param>
            <param name="unflat">the unflat object (e.g. the one that has Foo.Bar.Address.Name)</param>
            <returns>null if nothing was found or
            object that contains component (the last object in the tree where the property was found) and the Property that was found</returns>
        </member>
        <member name="M:Omu.ValueInjecter.Flatter.Unflattify(System.String,System.ComponentModel.PropertyDescriptorCollection,System.Object)">
            <summary>
            searches for the unflat property (according to the flatPropertyName), and creates instances of objects if it finds null values in it's way
            </summary>
            <param name="flatPropertyName">the string name of the flat property, Sample: FooBarAddressName</param>
            <param name="unflatProps">the properties of the unflat object (where the search is going to be)</param>
            <param name="unflat">the unflat object (e.g. the one that has Foo.Bar.Address.Name)</param>
            <returns>null if nothing was found or
            object that contains component (the last object in the tree where the property was found) and the Property that was found</returns>
        </member>
        <member name="M:Omu.ValueInjecter.ValueInjecter.Inject``1(System.Object,System.Object)">
            <summary>
            inject values from source to target
            </summary>
            <typeparam name="T">ValueInjection used </typeparam>
            <param name="target">target where the values is going to be injected</param>
            <param name="source">source from where the values are taken</param>
            <returns>the modified target</returns>
        </member>
        <member name="M:Omu.ValueInjecter.ValueInjecter.Inject(Omu.ValueInjecter.IValueInjection,System.Object,System.Object)">
            <summary>
            inject values from source to target
            </summary>
            <param name="injection">the injection used</param>
            <param name="target">target where the values is going to be injected</param>
            <param name="source">source from where the values are taken</param>
            <returns>the modified target</returns>
        </member>
        <member name="M:Omu.ValueInjecter.ValueInjecter.Inject``1(System.Object)">
            <summary>
            inject values into the target
            </summary>
            <typeparam name="T">ValueInjection used </typeparam>
            <param name="target">target where the values is going to be injected</param>
            <returns>the modified target</returns>
        </member>
        <member name="M:Omu.ValueInjecter.ValueInjecter.Inject(Omu.ValueInjecter.INoSourceValueInjection,System.Object)">
            <summary>
            inject values into the target
            </summary>
            <param name="injection">ValueInjection used</param>
            <param name="target">target where the values is going to be injected</param>
            <returns>the modified target</returns>
        </member>
        <member name="M:Omu.ValueInjecter.ValueInjecter.Inject(System.Object,System.Object)">
            <summary>
            the same as calling Inject&lt;LoopValueInjection>()
            </summary>
        </member>
        <member name="M:Omu.ValueInjecter.StaticValueInjecter.InjectFrom``1(System.Object,System.Object)">
            <summary>
            Injects values from source to target
            </summary>
            <typeparam name="T">ValueInjection used</typeparam>
            <param name="target">target where the value is going to be injected</param>
            <param name="source">source from where the value is taken</param>
            <returns>the modified target</returns>
        </member>
        <member name="M:Omu.ValueInjecter.StaticValueInjecter.InjectFrom(System.Object,Omu.ValueInjecter.IValueInjection,System.Object)">
            <summary>
            Injects values from source to target
            </summary>
            <param name="target">target where the value is going to be injected</param>
            <param name="injection">ValueInjection used</param>
            <param name="source">source from where the value is taken</param>
            <returns>the modified target</returns>
        </member>
        <member name="M:Omu.ValueInjecter.StaticValueInjecter.InjectFrom``1(System.Object)">
            <summary>
            Injects values into the target
            </summary>
            <typeparam name="T">ValueInjection(INoSourceValueInjection) used for that</typeparam>
            <param name="target">target where the value is going to be injected</param>
            <returns>the modified target</returns>
        </member>
        <member name="M:Omu.ValueInjecter.StaticValueInjecter.InjectFrom(System.Object,Omu.ValueInjecter.INoSourceValueInjection)">
            <summary>
            Injects value into target without source
            </summary>
            <param name="target">the target where the value is going to be injected</param>
            <param name="injection"> the injection(INoSourceValueInjection) used to inject value</param>
            <returns>the modified target</returns>
        </member>
        <member name="M:Omu.ValueInjecter.StaticValueInjecter.InjectFrom(System.Object,System.Object)">
            <summary>
            it the same as calling InjectFrom&lt;LookupValueInjection&gt;()
            </summary>
        </member>
        <member name="T:Omu.ValueInjecter.PropertyInfosStorage">
            <summary>
            this is for caching the PropertyDescriptorCollection of each Type
            </summary>
        </member>
    </members>
</doc>
